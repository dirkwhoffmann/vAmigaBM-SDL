# Configuration file of vAmigaBM (vAmiga Bare Metal), Dirk W. Hoffmann, 2021

# vAmiga is an Amiga emulator that was originally developed as a native
# application for macOS. vAmigaBM (Bare Metal) is a fork of this project that
# brings the emulator to a variety of other platforms. The application is
# based on SFML (Simple and Fast Multimedia Library) and can be ported with
# little effort to any hardware platform supporting this framework.

# This file is the main configuration file of vAmigaBM. It is read in when the
# application is started and defines the initial configuration of the virtual
# computer. You can change it at will and individualize your Amiga as you like.
# It is also possible to use a different configuration file if you wish. Simply
# specify the name of this file as a command line parameter when launching
# vAmigaBM.

# Hint: While the emulator is running, you can open the debug console at any
# time by pressing F11. Among other things, the console lets you view and
# change the currently used configuration. Please note that some options, such
# as the size of the main memory, can only be changed when the Amiga is powered
# off. Other options, like the various compatibility settings, can be changed
# any time.

# The debug console is also the best place to learn more about the syntax of
# each command. By pressing the TAB key twice, the console will show you all
# the options offered by the currently typed command.

# In the rest of this document, we will walk through all configuration options
# step-by-step, explaining each of them. For one thing, this will teach you how
# to configure the emulator. For another, it will give you an overview of the
# functionality of vAmigaBM.

# We start out with what is probably the most important configuration option,
# the selection of the Kickstart ROM. Please note that vAmiga does not come
# with any an original Commodore ROM. All Amiga ROMs are the intellectual
# property of the company Cloanto and are distributed for a fee. However, if
# you have purchased a Kickstart ROM legally, you can use it in vAmiga without
# difficulty.

# To install a ROM, all you have to do is uncomment the following line and
# insert the correct filename.
memory load rom /tmp/kickstart.rom

# If vAmiga is started with no Kickstart ROM specified, you have the option to
# install an Aros replacement ROM. This is an open-source kickstart variant
# that is freely redistributable. Please be aware that not all Amiga programs
# are compatible with the replacement ROMs. To achieve high compatibility, we
# therefore recommend the purchase of the original roms.

# Should you decide to use the Aros ROMs, you may notice that the Amiga has two
# different ROMs installed. This is due to the size of the Aros ROM, which
# significantly exceeds the maximum size of 512 MB. For this reason, the Aros
# ROM has been split into two separate ROMs. The first one appears in memory at
# the same addresses as the original Kickstart ROM. The second one appears in
# address range $E00000 - $E7FFFF.

# Rom extensions can also be installed manually. If you wish to do so, please
# uncomment the following commands and insert the correct file name:
# memory load ext /tmp/extended.rom
# memory set extstart e0

# The second statement determines the memory area the Rom extension is mapped
# in. Possible values are e0 and f0. In the latter case, the Rom becomes
# visible in address range $F00000 - $F7FFFF.

# Next, we configure the memory of our Amiga. With 512 KB Chip RAM and 512 KB
# Slow RAM we choose a configuration that was common back in the day. Chip RAM
# refers to the factory-installed memory which is located on the motherboard.
# Slow RAM refers to extended memory. In the case of the Amiga 500, this memory
# was installed by inserting a memory expansion card into the trapdoor slot on
# the bottom of the computer case.
memory set chip 512
memory set slow 512

# Independt of the selected amout of Chip and Slow RAM, you may optionally add
# up to 8 MB of Fast-Ram. We refrain from doing this in the standard
# configuration, because not all Amiga programs can get along with Fast RAM.
memory set fast 0

# If you owned an Amiga 500 like me and extended it with a Trapdoor memory
# card, you most likely had an real time clock installed, too. At that time,
# RTCs were additionally installed on most memory expansion cards. They can be
# easily recognized by the battery, which is required to keep the register
# contents alive. In the Amiga 2000, the real-time clock was standard and
# installed directly on the motherboard. For our Amiga, we choose a real-time
# clock from Oki, which was a frequently used model back in the day.
rtc set revision OKI

# Internally, the Amiga maps the RTC registers into a special memory area. This
# means the communication with the real-time clock happens as if its registers
# were a regular part of memory. It should be noted that the real-time clock
# does not appear in the same memory range in every Amiga model. Commodore had
# changed the location in the course of time.

# However, such model dependencies do not only affect the real-time clock.
# Within the 24-bit wide address space some memory areas are mirrored. That
# means we can reach one and the same target, e.g. a custom chip register,
# through several different addresses. A programmer could therefore just as
# well use an address from the mirrored area instead of the officially
# documented one, and many programmers did. Unfortunately, the mirrored areas
# are not the same in all Amiga models either. Overall, this means that we are
# confronted with a number of different memory layouts, and we need to tell the
# emulator which memory layout to use. In our virtual Amiga we recreate the
# memory layout of the classic Amiga 500, the computer of my youth.
memory set bankmap A500

# Before we continue with the next components, we set the remaining memory
# parameters. First, we instruct vAmiga to wait for a free data bus each time
# it accesses a memory cell in Slow RAM. This is exactly what happens in a real
# Amiga and the reason for the name "Slow" RAM by the way.
memory set slowramdelay yes

# The next two options decide which values should be written into RAM on
# startup and which values should be put on the data bus if a program reads
# from unmapped memory.
memory set raminit ZEROES
memory set unmapped FLOATING

# After the memory is configured, we turn our attention to the floppy drives.
# A real Amiga supports up to 4 floppy drives, although a single drive was so
# expensive back in the day that only a few hardcore enthusiasts happened to
# own such a configuration. The internal drive is referred to as df0 and is
# present in every Amiga. The external drives are identified as df1, df2 and
# df3. Those who owned a real Amiga might remeber how cumbersome it was to work
# with only one drive. Frequent disk changes were the norm. For this reason, we
# equip our Amiga with an external drive right from the start.
df1 connect
df2 disconnect
df3 disconnect

# The classic Amiga drives were DD (double density) drives, capable of storing
# 880 KB on a single floppy disk. Later kickstart revisions also supported HD
# drives, which can store twice as much data. vAmiga supports both drive types,
# with the internal drive always being a DD drive, though. We configure the
# external drive as a DD drive, too, due to its higher compatibility with older
# software titles.
df1 set model DD_35

# vAmiga can emulate a floppy drive in different ways. The emulation is fastest
# if we configure the drive as a so-called turbo drive. Such drives bypass the
# data transport via the DMA channel. Instead, they write the requested data
# chunk directly into memory. Such drives are significantly faster, but less
# compatible than original drives. In the standard configuration, we decide to
# emulate an original drive. It will rotate at exactly the same speed as a real
# one and transfer the requested data byte by byte via the DMA channel of the
# disk controller.
diskcontroller set speed 1

# To further increase compatibility, we instruct vAmiga to additionally emulate
# the mechanical properties of the floppy drives. This includes the ramp-up and
# ramp-down phases of the drive motor as well as the time required for the
# read/write head to move to another cylinder.
df0 set mechanics true
df1 set mechanics true

# Last but not least, we discuss two configuration options that are relevant
# for dealing with copy-protected programs, only. Some of these programs
# manipulate the DSKSYNC register to seek for an uncommon synchronization
# sequence on the current track. If such a sequence is missed out, the DSKSYNC
# interrupt won't be generated, which identifies the disk as a copy.
diskcontroller dsksync lock false
diskcontroller dsksync auto false

# Now it is time to configure the remaining components of our Amiga. Among
# these are the two CIAs (Complex Interface Adapters), the custom chips, and
# peripheral components such as the keyboard.

# The Amiga connects to the outside world via two peripheral chips (CIAs) of
# type MOS 8520. Among other things, they control the floppy drives and receive
# inputs from the keyboard. In this respect, the Amiga differs only slightly
# from Commodore's best-selling computer, the C64, which utilized two CIAs of
# the predecessor type MOS 6526 for this task. Both chip variants are
# functionally similar, but differ in details. One of these details concerns
# the TOD clock (Time-of-Day clock), which got redesigned in the 8520. Due to
# the use of a a battery backed-up clock in the Amiga, the CIA's TOD was no
# longer needed in its original form and therefore modified to an ordinary
# 24-bit counter. Since the 24-bit counter of the 8520 can be programmed
# similar to the TOD clock of the 6526, it is still called TOD by many people,
# although this name doesn't really fit anymore.

# The 24-bit counter has become famous due to a severe hardware error. This bug
# can cause an alarm interrupt to be triggered even though the alarm condition
# has not occurred. vAmiga is able to emulate this bug, known as the TOD bug,
# by setting the following option:
ciaa set todbug true
ciab set todbug true

# Another important aspect is the way the two CIAs are connected to the CPU.
# Both chips are driven by the so-called E-clock, a signal provided directly by
# CPU. The CPU generates the E-clock signal by outputting its own clock signal
# slowed down by a factor of 10. In general, the interaction of differently
# clocked components is not quite simple. In our case, the clock signal of the
# CPU must first be synchronized with the E-clock before any CIA register can
# be read or written. In vAmiga, E-clock-syncing can be switched on or off. We
# decide to activate this feature for higher compatibility:
ciaa set esync true
ciab set esync true

# At this point we direct our attention to the custom chips. Without those
# chips, the Amiga would never have taken the prominent place in computer
# history it occupies today. The most significant custom chip is undoubtedly
# Agnus which controls the interaction of all other components. I.e., every
# DMA access is done by this chip. Besides the classic OCS Agnus, vAmiga is
# able to emulate two variants of the more advanced ECS Agnus, which is often
# referred to as "Fat Agnus". Apart from several minor details, the Agnus
# variants mainly differ in the size of the addressable memory. While the OCS
# model can address 512 KB of chip RAM, the two ECS models grant access to 1 MB
# and 2 MB, respectively.

# Both ECS variants have an interesting ability that is not offered by the OCS
# variant. If an ECS Agnus is connected to 512 MB Chip RAM and 512 MB Slow RAM,
# it mirrors the Slow RAM behind the Chip RAM. This enables the Blitter to
# fully access both RAMs. vAmiga is able to emulate this behavior by setting
# the following option:
agnus set slowrammirror yes

# This brings us straight to the next component: the Blitter. This subcomponent
# of Agnus can be utilized to move large chunks of data or to combine multiple
# memory blocks by applying logic operations. All this happens without the
# intervention of the CPU, which is why the Amiga was significantly more
# powerful than its various competitors back in the day.

# vAmiga is able to emulate the Blitter in three different compatibility levels.
# In the lowest level (level 0), the so-called FastBlitter is activated, which
# performs the entire operation in one go. From the Amiga's point of view, a
# Blitter operation is thus always finished after a few clock cycles, regardless
# of data size. This level offers the highest speed, but also the lowest
# compatibility. In the highest level (level 2), the blitter is emulated
# accurately. Each data word is transferred individually, at exactly the same
# clock cycles the data word would be transferred in a real Amiga. This level
# offers the highest accuracy but the lowest speed. In level 1, the Blitter
# acts as an hybrid. First, it activates the FastBlitter which means that all
# data words are copied at once. After that only the bus scheduling is
# simulated. This means that the Blitter occupies the data bus in the exact
# same clock cycles as in level 2, but without transferring a single word. In
# the standard configuration, we go for the highest compatibility level:
blitter set accuracy 2

# Next, we configure Denise, the Amiga's video chip. As before, we start with
# the selection of the chip model:
denise set revision OCS

# The selected chip is part of the original chipset (OCS) and all revisions of
# the Amiga 1000, Amiga 500 and Amiga 2000 were equipped with it. If you own an
# Amiga 3000 or an Amiga 500+, your computer contains the full enhanced chip
# set (ECS) instead, including the new more advances HiRes Denise. It supports
# additional graphics modes and features a more advanced sprite unit. At
# present, this chip is not supported by vAmiga, leaving OCS Denise as the only
# choice for now.

# There is one exception, though. ECS Denise has a feature called "Border Blank"
# which causes the border to be drawn in black instead of the current background
# color. Some games use this functionality to surround the drawing area with a
# nicer looking frame. If you wish to emulate this feature in vAmiga, set the
# following option to true:
denise set borderblank false

# Let's move on to the emulation of the monitor. vAmiga is able to emulate
# different color palettes to mimic various kinds of monitors. We choose a
# default color palette to emulate the output of a color monitor, the most
# commonly used monitor type back then.
# [[NOT IN BETA]] denise set palette COLOR

# The Amiga monitor had several controls on the front that could be used to
# adjust the brightness, saturation and contrast of the displayed image. vAmiga
# offers these options, too:
# [[NOT IN BETA]] denise set brightness 50
# [[NOT IN BETA]] denise set saturation 50
# [[NOT IN BETA]] denise set contrast 50

# Denise's duties include the rendering of playfields and sprites. However, the
# generation of pixels is only one aspect. In addition, the chip has to perform
# a number of collision detections, which can be divided into three categories:
# The collision between two sprites, the collision between a sprite and a
# playfields, and the collision between two playfields. Since collision
# detection is only used by very few games, but at the same time requires a
# considerable amout of computing power, it can be disabled in vAmiga. If you
# wish to do so, set the following options to false:
denise set clxsprspr yes
denise set clxsprplf yes
denise set clxplfplf yes

# Next we configure the audio unit. Don't be surprised if you don't find a
# dedicated sound chip on the motherboard of a real Amiga. The audio unit is
# part of Paula, just like the disk controller and the interrupt controller.
# Internally, Paula generates four audio streams (channel 0 - channel 3).
# Channel 0 and 3 are routed to the right stereo output and channels 1 and 2 to
# the left.

# In vAmiga we can distribute the four audio channels as we like. By choosing
# appropriate parameters, we can, for example, emulate a mono output, swap the
# left with the right output, or isolate one of the four audio channels. For
# our virtual Amiga we choose the following configuration, which comes close
# to what we hear when working with a real Amiga.
audio set pan channel0 170
audio set pan channel1 30
audio set pan channel2 30
audio set pan channel3 170

# Next, we configure the volume. In vAmiga, this is done by setting six
# different parameters. The first four assign an individual volume to each audio
# channel. The last two, the so-called master volumes, are applied at the very
# end of the audio pipeline. They allow us to individually control the volume
# of the left and right speaker outputs after the audio channels have been
# distributed.
audio set volume channel0 50
audio set volume channel1 50
audio set volume channel2 50
audio set volume channel3 50
audio set volume left 50
audio set volume right 50

# Last but not least, we choose the sampling method. The selected method
# determines whether the generated sound samples should be interpolated, and if
# so, how. We choose the nearest neighbor method, which is a fairly good
# compromise between speed and quality.
audio set sampling NEAREST

# Let's turn our attention to the peripheral components. The central input
# devices of the Amiga are the mouse and the keyboard. While Commodore had
# equipped the Amiga 1000 and the Amiga 2000 with an external keyboard, they
# decided to integrate the keyboard directly into the case of the Amiga 500.
# This was only an aesthetic difference, though, as the connection to the
# motherboard was always the same. The keyboard first generates a key code for
# each pressed key. After that, it sends the code bit by bit to the CIA. As
# soon as the last bit is received, an interrupt is triggered and the interrupt
# takes over. With the following command we instruct vAmiga to accurately
# emulate the bit-by-bit communication with the keyboard:
keyboard set accuracy yes

# Next, we configure the mouse. When translating the real mouse coordinates
# into the virtual coordinates of the Amiga mouse, vAmiga applies a
# user-definable scaling factor. This factor controls how fast the mouse moves
# across the screen.
mouse set velocity 100

# If this option is set to no, vAmiga skips the transmission phase and writes
# the generated keycode directly into the corresponding CIA register. This mode
# is faster but less accurate.

# We made it: Our Amiga is completely configured. However, it is still switched
# off, which is why you will continue to see the start screen after the script
# has been processed successfully. If you wish to skip the start screen and
# switch on your Amiga right away, you can do so by commenting out the
# following commands:
# amiga power on
# amiga run

#df0 insert "/tmp/Paccer1989.adf"
#df0 insert "/tmp/defender.adf"
df0 insert "/tmp/workbench.adf"
