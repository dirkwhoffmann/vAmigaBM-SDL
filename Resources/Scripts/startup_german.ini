Konfigurationsdatei von vAmigaBM (vAmiga Bare Metal), Dirk W. Hoffmann, 2021

Was ist vAmiga?
vAmiga ist ein Commodore Amiga Emulator, der in der Lage ist, einen Amiga 500,
Amiga 1000, Amiga 2000 in hoher Genauigkeit zu emulieren. Die Applikation wurde
speziell für macOS entwickelt und verfügt über eine komplexe, eigens auf diese
Betriebssystem abgestimmte Benutzungsschnittstelle.

Was ist vAmiga Bare Metal?
vAmigaBM ist ein Ableger von vAmiga, der eine reduzierte Bedienungsoberfläche aufweist, dafür aber einer Vielzahl verschiedener Hardware-Plattformen unterstützt. Die Applikation baut auf der "Simple and Fast Multimedia Library", kurz SFML, auf und kann mit wenig Aufwand auf jede Hardware-Plattformen portiert werden, die dieses Framework unterstützt.

Was ist diese Datei?
Die vorliegende Datei ist die zentrale Konfigurationsdatei von vAmigaBM. Sie wird beim Start der Applikation eingelesen und legt die initiale Konfiguration des virtuellen Computers fest. Sie können diese Datei beliebig ändern und ihren Amiga damit nach belieben individualisieren. Wenn Sie eine andere Konfigurationsdatei verwenden möchten, ist dies ebenfalls möglich. Geben Sie den Namen dieser Datei bei Starten von vAmigaBM einfach als Kommandozeilenparameter an.

Tipp: Während des laufenden Betriebs können Sie jederzeit mit der Taste F11 die Debug-Konsole öffnen. Dort können Sie unter anderem die verwendete Konfiguration einsehen und verändern. Bitte beachten Sie, dass manche Optionen, wie z.B. die Größe des Hauptspeichers, nur dann geändert werden können, wenn der Amiga ausgeschalteten ist. Andere Optionen, wie z.B. die verschiedenen Kompatibilitätseinstellungen, unterstützen hingegen „hot plugging“. In diesem Fall können sie die Konfiguration direkt im laufenden Betrieb ändern.

Des Weiteren ist die Debug-Konsole der erste Anlaufpunkt, um mehr über die Syntax der einzelnen Kommandos zu erfahren. Durch den zweimaligen Druck der TAB-Taste zeigt Ihnen die Konsole alle Optionen an, die von dem momentan eigetippten Befehl angeboten werden.

Im Rest dieses Dokuments werden wir Schritt für Schritt die einzelnen Konfigurationsoptionen durchgehen, und jede einzelne davon erklären. Neben einer Anleitung zur Konfiguration des Emulators erhalten Sie damit gleichermaßen einen Überblick über den Funktionsumfang von vAmigaBM.

Wir beginnen mit der wahrscheinlich wichtigsten Konfigurationsoption, der Auswahl des Kickstart-Roms. Beachten Sie, dass vAmiga ohne die Original-Roms ausgeliefert wird. Sämtliche Amiga Roms sind das geistige Eigentum von Cloanto und werden von dieser Firma kostenpflichtig vertrieben. Falls Sie ein Kickstart-Rom auf legalem Weg erworben haben, können sie dieses aber problemlos in vAmiga verwenden. Die Einbettung geschieht über das folgende Kommando, das Sie lediglich auskommentieren und um den richtigen Dateinamen ergänzen müssen:
# memory load rom /tmp/kickstart.rom

Wird vAmiga ohne die Angabe eines Kickstart-Roms gestartet, erhalten sie die Option, ein Aros Ersatz-Rom zu installieren. Hierbei handelt es sich um eine freie Kickstart-Variante, die unter einer Open-Source-Lizenz veröffentlicht ist und kostenfrei weitergegeben werden darf. Bitte seien Sie sich im Klaren darüber, dass nicht alle Amiga-Programme mit den Ersatz-Roms kompatibel sind. Um eine hohe Kompatibilität zu erzielen, empfehlen wir daher den Erwerb der Original-Roms.

Sollten Sie sich trotzdem für die Aros-Roms entscheiden, werden Sie vielleicht bemerken, dass der Amiga intern zwei Rom-Bausteine anspricht. Dies ist der Größe des Aros-Roms geschuldet, die die maximale Größe von 512 MB deutlich übersteigt. Intern wurde das Aros Rom daher in zwei einzelne Roms aufgeteilt. Das erste erscheint im Speicher and den gleichen Adressen, an denen auch das originale Kickstart-Rom erscheint. Das zweite wird im Bereich $E00000 - $E7FFFF eingeblendet.

Rom-Erweiterungen können in vAmiga auch manuell eingebunden werden. Falls Sie dies möchten, kommentieren Sie bitte die folgenden Befehle aus und setzen den richtigen Dateinamen ein:
# memory load ext /tmp/extended.rom
# memory set extstart e0

Der zweite Befehl legt fest, in welchem Speicherbereich die Rom-Erweiterung eingeblendet wird. Neben der Angabe von e0 ist auch die Angabe von f0 möglich. In diesem Fall wird das Rom im Adressbereich $F00000 - $F7FFFF sichtbar.

Als nächstes konfigurieren wir den Arbeitsspeicher unseres Amigas. Wir wählen eine für die damalige Zeit typische Konfiguration mit 512 KB Chip-Ram und 512 KB Slow-Ram. Chip-Ram ist der werksseitig eingebaute Speicher auf der Hauptplatine. Slow-Ram ist der Erweiterungsspeicher, der z.B. beim Amiga 500 in Form einer Speichererweiterungskarte in den Trapdoor-Slot eingesetzt wird.
#memory set chip 512
#memory set slow 512

Falls Sie dies wünschen, können Sie Ihren Amiga zusätzlich um bis zu 8 MB Fast-Ram ergänzen. Wir verzichten in der Standardkonfiguration darauf, da nicht alle Amiga-Programme mit einer solchen Fast-Ram-Erweiterung zurecht kommen.
#memory set fast 0

Wenn Sie selbst, wie ich, einen Amiga 500 besaßen und diesen mit einer Trapdoor-Speicherkarte erweitert haben, so waren Sie mit hoher Wahrscheinlichkeit auch der Besitzer einer Echtzeituhr, kurz RTC. Diese war zur damaligen Zeit auf den meisten Speichererweiterungskarten zusätzlich verbaut und ist sehr einfach an der Batterie zu erkennen, die zur Persistierung der Registerinhalte benötigt wurde. Im Amiga 2000 war die Echtzeituhr serienmäßig vorhanden und direkt auf der Hauptplatine installiert.
Für unseren Amiga wählen wir eine Echtzeituhr vom Typ Oki, ein damals häufig verbautes Modell:
# rtc set model OKI

Intern blendet der Amiga die Register der Echtzeituhr in einem speziellen Speicherbereich ein, d.h., die Kommunikation mit der Echtzeituhr erfolgt so, als wären deren Register ein regulärer Teil des Hauptspeichers. Hierbei ist zu beachten, dass die Echtzeituhr nicht in jedem Amiga-Modell an den gleichen Speicheradressen erscheint. Commodore hatte den zugewiesenen Bereich im Laufe der Zeit verändert.

Derlei Modellabhängigkeiten betreffen aber nich nur die Echtzeituhr. Innerhalb des 24-bit breiten Adressraums sind manche Speicherbereiche gespiegelt, d.h., wir können ein und dasselbe Ziel, z.B. ein Custom-Chip-Register, über mehrere verschiedene Adressen ansprechen. Ein Programmierer konnte neben den offiziell dokumentierten Adressen daher genauso gut eine Adresse aus dem Spiegelbereich nutzen, nur leider sind auch die gespiegelten Bereiche nicht in allen Amiga-Modellen dieselben. Kurzum: Von Amiga-Modell zu Amiga-Modell haben wir es mit einem unterschiedlichen Memory-Layout zu tun. Formal wird wir das memory layout mithilfe einer Bank map beschrieben. Diese unterteilt den Speicher in einzelne Segmente und gibt für jedes einzelne Segment an, welche Komponente darüber angesprochen wird. In unserem virtuellen Amiga bilden wir die Bank Map des klassischen Amiga 500 nach, dem Computer meiner Jugend:
# memory set bankmap A500

Bevor wir mit der nächsten Komponenten fortfahren, legen wir noch die verbleibenden Speicherparameter fest. Zunächst weisen wir vAmiga an, bei jedem Zugriff auf das Slow-Ram die Verfügbarkeit des Datenbus abzuwarten. Genau dies geschieht auch in einem richtigen Amiga und ist, nebenbei bemerkt, der Grund für den Namen "Slow-Ram".
#memory set slowramdelay yes

Die nächsten beiden Optionen legen fest, mit welchen Werten das RAM beim Start initialisiert wird und welche Werte vAmiga auf dem Datenbus legen soll, falls ein Programm auf einen nicht verwendeten Speicherbereich zugreift:
#memory set RAM_INIT_PATTERN ZEROES
#memory set OPT_UNMAPPING_TYPE FLOATING

Nachdem der Speicher konfiguriert ist, wenden wir uns den Floppy-Laufwerken zu. Ein richtiger Amiga unterstützt bis zu 4 Diskettenlaufwerke, wobei ein einzelnes Laufwerk zur damaligen Zeit so teuer war, dass nur wenige hartgesottene Enthusiasten eine solche Konfiguration besaßen. Das interne Laufwerk wird als df0 bezeichnet und ist in jedem Amiga vorhanden. Die externen Laufwerke haben die Kennungen df1, df2 und df3.
All jene, die einen richtigen Amiga besaßen, wissen, wie umständlich die Arbeit mit nur einem einzigen Laufwerk ist. Ständige Diskettenwechsel sind die Regel. Aus diesem Grund statten wir unseren Amiga gleich von Beginn an mit einem externen Laufwerk aus:
#df1 connect
#df2 disconnect
#df3 disconnect

Die klassischen Amiga-Laufwerke sind DD-Laufwerke (double density), die auf einer Diskette 880 KB speichern können. Neuere Kickstart-Versionen erlauben auch die Verwendung von HD-Laufwerken, die doppelt so viele Daten auf einer Diskette unterbringen. vAmiga unterstützt beide Laufwerkstypen, wobei das interne Laufwerk immer ein DD-Laufwerk ist. Trotzdem wählen wir auch für das externe Laufwerk ein DD-Laufwerk aus, da es eine höhere Kompatibilität bietet.
#drive set type DRIVE_DD

vAmiga kann ein Diskettenlaufwerk mit unterschiedlicher Geschwindigkeit und Genauigkeit emulieren. Die Emulation ist am schnellsten, wenn wir das Laufwerk als sogenanntes Turbo-Drive konfigurieren. Ein solches Laufwerk lädt bei einem Diskettenzugriff die angefragte Anzahl an Datenworten auf einen Schlag in den Speicher und verzichtet vollständig auf die Emulation des Datentransports über den DMA-Kanal. Dies Variante verkürzt die Ladezeiten deutlich, gleichzeitig bieten sie die geringsten Kompatibilität. Wir entscheiden uns für die Emulation eines Original-Laufwerks. Das bedeutet, dass sich unser virtuelles Laufwerk exakt mit der gleichen Geschwindigkeit dreht wie ein reales und die Daten Byte für Byte über den DMA-Kanal des Diskettencontrollers übertragen werden.
# df0 set speed 1

Um die Kompatibilität weiter zu steigern, weisen wir vAmiga an, auch die mechanischen Eigenschaften der Diskettenlaufwerke zu emulieren. Hierunter fallen die Verzögerungen, die beim Starten und Stoppen des Motors entstehen, sowie die Zeit, die der Stepper-Motor benötigt, um den Schreib-Lesekopf auf einen anderen Cylindern zu bewegen.
#diskcontroller set emulate mechanics

Zuguterletzt besprechen wir zwei Konfigurationsoptionen, die lediglich für den Umgang mit kopiergeschützen Programmen eine Rolle spielen. Einige dieser Programme manipulieren das DSKSYNC Register, um auf der eingelegten Diskette nach einer ungewöhnlichen Synchronisationssequenz zu suchen. Wird eine solche Sequenz nicht gefunden, bleibt der DSKSYNC-Interrupt aus, und die Diskette ist als Kopie erkannt. Als Gegenmaßnahme können wir vAmiga anweisen, das DSKSYNC-Register zu schützen. Sobald der Schutz aktiviert ist, werden alle Schreibzugriffe auf das Register verworfen. Alternativ können wir dem Emulator bitten, immer einen DSKSYNC-Interrupt zu erzeugen, d.h., auch dann, wenn keine passende SYNC-Sequenz gefunden wurde. Da die DSKSYNC-Optionen nur einen verschwindend geringen Teil aller Amiga-Programme betreffen, schalten wir beide Optionen in der Standardkonfiguration aus:
# diskcontroller set OPT_LOCK_DSKSYNC false
# diskcontroller set OPT_LOCK_DSKSYNC false

Jetzt ist es an der Zeit, die restlichen Komponenten des Amiga zu konfigurieren. Hierzu gehören die beiden CIAs (Complex Interface Adapters), die Custom-Chips und die Peripherie-Komponenten, zu denen beispielsweise die Tastatur gehört.

Intern stellt der Amiga den Kontakt mit der Außenwelt über zwei Peripheriebausteine (CIAs) vom Typ MOS 8520 her. Diese werden unter anderen dazu verwendet, um die Diskettenlaufwerke zu steuern und um Eingaben von der Tastatur entgegenzunehmen. Tatsächlich unterscheidet sich der Amiga in diesem
Punkt nur geringfügig von Commodores meistverkauften Computer, dem C64, wo zwei zwei CIAs des Vorgängertyps MOS 6526 ihren Dienst verrichten. Beide Chip-Varianten sind funktional fast identisch, im Detail gibt es aber Unterschiede. Der größte Unterschied betrifft die TOD clock (Time-of-Day clock) des MOS 6526. Durch die Verwendung einer richtigen Echtzeituhr wurde diese Komponenten nicht mehr in der ursprünglichen Form benötigt und in der Amiga-Variante daher zu einem gewöhnlichen 24-Bit-Zähler umgestaltet. Da sich der 24-Bit-Zähler des 8520 aber in ganz ähnlicher Weise programmieren lässt wie die TOD clock des 6526, wird der Zähler des 8520 auch weiterhin von vielen auch TOD bezeichnet, auch wenn er diesen Namen eigentlich nicht mehr verdient.
Zu einer gewissen Berühmtheit ist der 24-Bit-Zähler des 8520 durch einen Hardware-Fehler in der Überlauflogik gelangt. Der Fehler führt dazu, dass beim Wechsel in einen neuen Zählerstand unter gewissen Bedingungen ein falscher Alarm-Interrupt ausgelöst werden kann. vAmiga ist in der Lage, diesen als TOD-Bug bezeichnete Fehler zu emulieren, und zwar durch das Setzen der folgenden Option:
# cia set todbug true

Eine andere wichtige Eigenschaft betrifft die Art und Weise, wie die beiden CIAs an die CPU angebunden sind. Beide chips werden durch die sogenannte E-clock getakted, einem Taktsignal, das direkt von der Motorola 68000 CPU bereitgestellt wird. Die CPU erzeugt das E-Clock-Signal, indem es ihr eigenes Taktsignal um den Faktor 10 verlangsamt auf dem E-Clock-Ausgang ausgibt. Technisch ist das Zusammenspiel unterschiedlich getakteter Komponenten nicht ganz einfach. So muss im Falle des Amiga jeder CIA-Zugriff zuerst mit dem Taktsignal der CPU synchronisiert werden (E-clock-syncing). Erst danach kann der Zugriff erfolgen. In vAmiga kann das E-clock-syncing an oder ausgeschaltet werden. Wir entscheiden uns dafür, die Sychronisation zu aktivieren:
# cia set eclocksync true

An dieser Stelle lenken wir unsere Aufmerksamkeit auf die Custom Chips, ohne die der Amiga niemals den prominenten Platz in der Geschichte des Computer hätte eingenommen können, den er heute besetzt. Der bedeutendte Custom-Chip ist zweifelsfrei Agnus. Er ist der Chef im Ring, da er das Zusammenspiel aller Komponenten bestimmt. Auch sämtliche DMA-Zugriffe erfolgen über diesen Chip. Neben dem klassischen OCS-Agnus ist vAmiga in der Lage, zwei Varianten des weiterentwickelten ECS-Agnus (Fat Agnus) zu emulieren. Von mehreren kleineren Details abgesehen, unterscheiden sich die Agnus-Varianten vor allem in der Größe des adressierbaren Speichers. Während die OCS-Variante 512 KB Chip-Ram adressieren kann, gewähren die beiden ECS-Varianten Zugriff auf 1 MB bzw. 2 MB Chip-Ram.

Beide ECS-Varianten verfügen über eine interessante Fähigkeit, die der OCS-Variante verwehrt bleibt. Wird ein Amiga mit einem ECS-Agnus mit 512 MB Chip-Ram und 512 Slow-Ram betrieben, so blendet Agnus das Slow-Ram zusätzlich hinter dem Chip-Ram ein. Dies ist insbesondere aus der Sicht des Blitters wichtig, der hierdurch den vollen Zugriff auf beide RAM-Speicher erhält. vAmiga ist in der Lage, dieses Verhalten zu emulieren, und zwar durch das Setzen der folgenden Option:
#agnus set slowrammirror yes

Damit sind wir bereits bei der nächsten wichtigen Komponenten angelangt: dem Blitter. Hierbei handelt es sich eine Teilkomponente von Agnus, die ihn in die Lage versetzt, verschiedene Speicherblöcke einzulesen, durch die Anwendung diverser Logikoperationen miteinander zu kombinieren, und das Resultat an einer anderen Stelle im Speicher abzulegen. All dies geschieht ohne das Zutun der CPU, was einer der Hauptgründe für die zur damaligen Zeit vergleichsweise hohe Rechenleistung des Amiga war.

vAmiga ist in der Lage, den Blitter in drei verschiedenen Kompatibilitätsstufen zu emulieren. In der niedrigsten Stufe (Stufe 0) wird der sogenannte FastBlitter aktiviert, der die komplette Blitter-Operation auf einen Schlag ausführt. Aus der Sicht des Amiga ist eine Blitter-Operation damit immer nach einigen wenigen Taktzyklen beendet, unabhängig von der Größe des zu bearbeiteten Datenbereichs. Diese Stufe bietet selbstredend die höchsten Geschwindigkeit, aber auch die geringste Kompatibilität. In der höchsten Stufe (Stufe 2) wird der Blitter hingegen akkurat emuliert. Jedes Datenwort wird einzeln transferiert, und zwar genau zu jenen Zeitpunkten, zu denen das Datenwort auch in einem richtigen Amiga transferiert worden wäre. Diese Stufe bietet die höchste Genauigkeit und die geringste Geschwindigkeit. Stufe 1 ist eine Mischform. In ihr wird znächst der FastBlitter aktiviert, d.h., es werden alle Datenworte auf einen Schlag kopiert. Danach wird nur noch das Bus-Scheduling simuliert. Das bedeutet, dass der Blitter in Stufe 1 den Datenbus genau zu jenen Zeitpunkten belegt, an denen er dies auch in Stufe 2 tun würde, jedoch ohne dabei ein Datenwort zu transferieren.
#blitter set accuracy 2

Als nächstes konfigurieren wir Denise, den Video-Chip des Amiga. Auch hier beginnen wir mit der Auswahl des Chip-Modells:
#denise set revision OCS

Der ausgewählte Chip ist Bestandteil des Original Chipsets (OCS) und wurde in allen Amiga 1000, Amiga 500 und Amiga 2000 verbaut. Sollten Sie einen Amiga 500+ Ihr eigen nennen, sind sie hingegen  stolzer Besitzer eines ECS-Denise. Er unterstützt zusätzliche Grafik-Modi und verfügt über eine erweiterte Sprite-Einheit. Diesen Chip wird von vAmiga gegenwärtig nicht unterstützt.

vAmiga ist in der Lage, verschieden Farbpaletten zu emulieren. Wir wählen eine Standard-Farbpalette aus, um die Ausgabe auf einem gewöhnlichen Farbmonitor nachzubilden.
#denise set palette COLOR

Der Amiga-Monitor hatte an der Vorderseite mehrere Regler, mit denen verschiedene Bildparameter justiert weren können. Die Farbdarstellung wurde dabei durch Parameter beeinfluss: Die Helligkeit, die Sättigung und der Konstrast. In vAmiga können wir diese drei Parameter ebenfalls verändern. Der Emulator passt die Bilddarstellung dann entsprechend an.
#denise set brightness 50
#denise set saturation 50
#denise set contrast 50

double getSaturation() { return saturation; }
void setSaturation(double value);

double getContrast() {

Zu den zentralen Aufgaben von Denise gehört die Darstellung der Playfields und der Sprites. Die Erzeugung der Grafikpixel ist dabei aber nur ein Aspekt. Zusätzlich führt der Chip eine Reihe von Kollisionserkennung durch, die sich in drei Kategorien einteilen lassen: Die Kollision zweier Sprites, die Kollision eines Sprites mit einem der beiden Playfield sowie die Kollision der beiden Playfields untereinander. Da die Kollisionserkennung zum einen nur von sehr wenigen Spielen verwendet wird und zum anderen eine gewisse Rechenleistung erfordert, lässt sie sich in vAmiga deaktivieren. Falls sie dies wünschen, setzen die folgenden Optionen auf
false:
#denise set OPT_CLX_SPR_SPR yes
#denise OPT_CLX_SPR_PLF yes
#denise OPT_CLX_PLF_PLF yes

Als Nächstes konfigurieren wir die Audio-Einheit. Seien Sie nicht überrascht, wenn sie in einem echten Amiga, anders als z.B. in einem echten C64, keinen dedizierten Sound-Chip auf der Hauptplatine finden. Die Audio-Einheit des Amiga ist Bestandteil von Paula, jenem Custom-Chip, der auch den Disk controller und den Interrupt controller beinhaltet. Intern generiert Paula vier Audio-Datenströme, von denen jeweils zwei auf einen der beiden Stereo-Ausgänge gelegt werden.

Wir beginnen mit der Auswahl der Sampling-Methode. Sie bestimmt, ob die generierten Sound-Samples interpoliert werden sollen, und wenn ja, auf welche Weise. Wir wählen die Nächste-Nachbar-Methode, die ein guter Kompromiss zwischen Geschwindigkeit und Qualität darstellt.
#audio set sampling NEAREST

Nun konfigurieren wir die Lautstärke. In vAmiga können wir diese für jeden der vier Audio-Kanäle individuell einstellen:
#audio volume channel0 50
#audio volume channel1 50
#audio volume channel2 50
#audio volume channel3 50

Nachdem die Lautstärke eingestellt ist, legen wir fest, wie vAmiga die vier Kanäle auf den linken und den rechten Lautsprecherausgang verteilen soll. Ein echter Amiga gibt die Audio-Kanäle 0 und 3 auf dem rechten Lautsprecher aus und die Kanäle 1 und 2 auf dem linken. In vAmiga können wir die vier Audio-Kanäle völlig beliebig auf die Ausgänge verteilen. Durch die Wahl entsprechender Parameter können wir beispielsweise eine Mono-Ausgabe emulierten, den linken mit dem rechten Ausgang vertauschen, oder einen der vier Audio-Kanäle isolieren. Für unseren virtuellen Amiga wählen wir die folgende Konfiguration, die einem realen Amiga sehr nahe kommt:
#audio volume pan0 170
#audio volume pan1 30
#audio volume pan2 30
#audio volume pan3 170

Abschließend legen wir die Lautstärke des linken und des rechten Lautsprecherausgangs fest. Diese lassen sich in vAmiga unabhängig von den Kanal-Lautstärken seperat einstellen:
#audio volume channelL 50
#audio volume channelR 50

Kommen wir jetzt zu den Peripherie-Komponenten. Zu den zentralen Eingabegeräten des Amiga gehört die die Tastatur und die Maus. Während Commodore den Amiga 1000 und den Amiga 2000 mit einer externen Tastatur ausgestattet hatte, war sie im Amiga 500 fest in das Gehäuse integriert. In beiden Fällen ist die technische Anbindung aber die gleiche. Die Tastatur liefert ihre Signale über eine serielle Datenleitung an einen der beiden CIAs. Die Verarbeitung eines Tastendrucks ist damit gar nicht so simpel wie er auf den ersten Blick erscheint. Die Tastatur erzeugt für jede gedrückte Taste zunächst einen Keycode und sendet diesen anschließend Bit für Bit an den CIA. Sobald das letzte Bit empfangen ist, wird ein Interrupt ausgelöst und das Zeichen dann weiterverarbeitet. Mit dem folgenden Kommando weisen wir vAmiga an, die bitweise Kommunikation mit der Tastatur akkurat zu emulieren:
#Keyboard set accuracy yes

Nach der Tastatur konfigurieren wir die Maus. Bei der Übersetzung der Bewegung der realen Maus in die Bewegung der virtuallen Amiga Maus wendet vAmiga einen Skalierungsfaktor an, mit dem wir deren Sensitivität beeinflussen können. Wir setzen ihn mit der folgenden Option:
#mouse set velocity 200


Wird diese Option auf no gesetzt, verzichtet vAmiga auf die Emulation der bitweisen Übertragung und schreibt die von der Tastatur generierten Keycodes direkt in das entsprechende CIA-Register. Dieser Modus ist schneller, aber weniger akkurat als der erste.

Wir haben es geschafft: Unser Amiga ist nun vollständig konfiguriert. Allerdings ist er immer noch ausgeschaltet, weshalb Sie in vAmigaBM auch nach der erfolgreichen Abarbeitung des Skripts weiterhin den Startbildschirm sehen. Dort haben sie jetzt die Möglichkeit, den virtuellen Amiga per Tastendruck einzuschalten. Falls sie den Startbildschirm in Zukunft nicht mehr sehen möchten, können sie ihren Amiga auch direkt aus diesem Skript heraus starten. Kommentieren Sie hiefür einfach die folgenden beiden Kommandos aus:
#amiga power on
#amiga run
